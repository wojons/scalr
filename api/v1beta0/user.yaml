# This is ignored by Swagger, but we use it for DRY YAML definitions
x-dry-yaml-definitions:
  scopeProperty: &scopeProperty
        type: string
        enum:
          - scalr
          - account
          - environment
          - farm
          - farmrole
          - role
          - server
  architecture: &architectureProperty
    type: string
    enum:
      - i386
      - x86_64
  cloudLocationProperties: &cloudLocationProperties
    cloudPlatform: &cloudPlatform
      description: "Cloud Platform this resources resides in."
      type: string
      enum:
        - ec2
        - gce
        - azure
        # cloudstack based
        - cloudstack
        - idcf
        # openstack based
        - openstack
        - ocs
        - rackspacenguk
        - rackspacengus
        - hpcloud
        - mirantis
        - vio
        - cisco
    cloudLocation: &cloudLocation
      description: >-
        More precise Cloud Location (within a given Cloud Platform) for this resource.
        May be null if this resource does not have a location (and is global to the platform).
        Note that if you'd like to filter on this property, you **must** also filter on `cloudPlatform`.

      type: string
  openstackProvider: &openstackProvider
    description: "Cloud provider that should be specified for OpenStack based clouds."
    type: string
    enum:
      - openstack
      - ocs
      - hpcloud
      - mirantis
      - vio
      - cisco
  cloudstackProvider: &cloudstackProvider
    description: "Cloud provider that should be specified for CloudStack based clouds."
    type: string
    enum:
      - cloudstack
      - idcf
  pathParamsPatterns:
    uuidShort: &uuidShortRegExp
      pattern: "[A-Fa-f0-9]+"
      minLength: 12
      maxLength: 12
    uuid: &uuidRegExp
      pattern: "[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}"
      minLength: 36
      maxLength: 36

swagger: '2.0'

info:
  version: '1.0.0'
  title: Scalr User API
  description: "Manage Roles, Images, Farms, Farm Roles, and Servers."

basePath: '/api/v1beta0/user'

produces:
  - application/json

parameters:
  envId:
    name: envId
    description: "The ID of the Environment scoping this request."
    in: path
    type: integer
    required: true

  # TODO - automate generation of those
  globalVariableName:
    name: globalVariableName
    description: "The name of the Global Variable being accessed."
    in: path
    type: string
    required: true
    pattern: "\\w+"
    minLength: 2
    maxLength: 128

  scriptVersionNumber:
    name: scriptVersionNumber
    description: "The version number of the Script Version being accessed."
    in: path
    type: integer
    required: true

  metricName:
    name: metricName
    description: "The name of the Scaling Metric."
    in: path
    type: string
    required: true
    pattern: "[A-Za-z0-9]+"
    minLength: 5

  serverId:
    name: serverId
    description: "The identifier of the Server."
    in: path
    type: string
    required: true
    <<: *uuidRegExp

responses:
  ClientError:
    description: "A client-side error was made."
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # InvalidStructure is when the request was missing a required parameter, etc.
      - name: InvalidStructure
        description: "Your request is structurally incorrect, and was not understood by the API."

      # InvalidValue is when we found the data we expected, but it didn't pass validation (FK didn't exist,
      # field didn't match regex).
      - name: InvalidValue  # Consider renaming BadValue
        description: "Your request was understood by the API, but included data that is not acceptable."

      # BadRequest is when the request didn't make any sense (i.e. last option).
      - name: BadRequest
        description: "Your request wasn't understood by the API."

  AuthenticationError:
    description: "Request was not authenticated."
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # BadAuthentication is when authentication failed.
      - name: BadAuthentication
        description: "Your request authentication failed to validate."

  PermissionsError:
    description: "Insufficient permissions."
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      - name: ScopeViolation
        description: "Your request should be made in a different Scope."

      - name: PermissionViolation
        description: "Your request requires permissions you do not have."

  NotFoundError:
    description: "Resource not found."
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # EndpointNotFound is when the request is for a URL that doesn't exist to begin with.
      - name: EndpointNotFound
        description: "The route you are trying to access does not exist."
        noDoc: true

      # ObjectNotFound is when the request is for a URL that exists, but points to an object that doesn't
      # (e.g. bad ID)
      - name: ObjectNotFound
        description: "The URL you are trying to access does not exist."

  ConflictError:
    description: "Conflict with current state."
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # ObjectInUse is when e.g. trying to delete an Image that is being used.
      - name: ObjectInUse
        description: "The changes you are trying to make aren't possible while this object is in use."

      # UnicityViolation is when e.g. trying to create an object whose name duplicates one.
      - name: UnicityViolation
        description: "The changes you are trying to make violate a unicity constraint."
      - name: Locked
        description: "Some of the objects being changed is locked for changing."
      - name: NotEnabledPlatform
        description: "Cloud platform is not enabled."
      - name: OperatingSystemMismatch
        description: "The Operating system mismatch."
      - name: ConfigurationMismatch
        description: "Some of the configuration settings cannot be applied, conflicts or wrong."
      - name: Deprecated
        description: "Some of the object or action is deprecated."
      - name: UnacceptableState
        description: "The action can't be perfomed due to object's state."

  ServerError:
    description: "A server-side error occured."
    schema:
      $ref: '#/definitions/ApiErrorResponse'

  NotImplementedError:
    description: "Error is raised when the feature is not implemented in Scalr."
    schema:
      $ref: '#/definitions/ApiErrorResponse'

  ServiceUnavailableError:
    description: "The service is currently unavailable."
    schema:
      $ref: '#/definitions/ApiErrorResponse'

  DeleteSuccessResponse:
    description: "Successful deletion."
    schema:
      $ref: '#/definitions/DeleteSuccessResponse'

paths:

  ############
  # Projects #
  ############

  /{envId}/projects/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "List Projects available in this Environment."
      responses:
        200:
          $ref: '#/responses/ProjectList'
    post:
      description: "Creates a new Project in this Environment."
      parameters:
        - $ref: '#/parameters/ProjectObject'
      responses:
        201:
          $ref: '#/responses/ProjectDetails'

  /{envId}/projects/{projectId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/projectId'
    get:
      description: "Return a JSON representation of a Project."
      responses:
        200:
          $ref: '#/responses/ProjectDetails'

  #################
  # Const Centers #
  #################

  /{envId}/cost-centers/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes Cost Centers available in the Environment."
      responses:
        200:
          $ref: '#/responses/CostCenterList'

  /{envId}/cost-centers/{costCenterId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/costCenterId'
    get:
      description: "Describes detailed information about a specified Cost Center."
      responses:
        200:
          $ref: '#/responses/CostCenterDetails'

  ###################
  # Role Categories #
  ###################

  /{envId}/role-categories/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes Role Categories available in the Environment."
      responses:
        200:
          $ref: '#/responses/RoleCategoryList'
    post:
      description: "Creates a new Role Category in the Environment."
      parameters:
        - $ref: '#/parameters/RoleCategoryObject'
      responses:
        201:
          $ref: '#/responses/RoleCategoryDetails'

  /{envId}/role-categories/{roleCategoryId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleCategoryId'
    get:
      description: "Describes detailed information about a specified Role Category."
      responses:
        200:
          $ref: '#/responses/RoleCategoryDetails'
    patch:
      description: "Modifies the attributes of the specified Role Category."
      parameters:
        - $ref: '#/parameters/RoleCategoryObject'
      responses:
        200:
          $ref: '#/responses/RoleCategoryDetails'
    delete:
      description: "Deletes the Role Category from the Environment."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  #########
  # Roles #
  #########

  /{envId}/roles/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Roles available in the Environment."
      responses:
        200:
          $ref: '#/responses/RoleList'
    post:
      description: "Creates a new Role in the Environment."
      parameters:
        - $ref: '#/parameters/RoleObject'
      responses:
        201:
          $ref: '#/responses/RoleDetails'

  /{envId}/roles/{roleId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
    get:
      description: "Describes detailed information about a specified Role."
      responses:
        200:
          $ref: '#/responses/RoleDetails'
    patch:
      description: "Modifies Role attributes."
      parameters:
        - $ref: '#/parameters/RoleObject'
      responses:
        200:
          $ref: '#/responses/RoleDetails'
    delete:
      description: "Deletes specified Role from the Environment."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'


  /{envId}/roles/{roleId}/images/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
    get:
      description: "Describes all Images associated with the specified Role."
      responses:
        200:
          $ref: '#/responses/RoleImageList'
    post:
      description: >-
        Associates a new Image with this Role.
        This may fail if an existing Image conflicts with the
        Image you are trying to add (i.e. they are in the same location).

      parameters:
        - $ref: '#/parameters/RoleImageObject'
      responses:
        201:
          $ref: '#/responses/RoleImageDetails'

  /{envId}/roles/{roleId}/images/{imageId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/imageId'
    get:
      description: "Redirects to the Image."
      responses:
        200:
          description: "Redirects to the Image."
          $ref: '#/responses/ImageDetails'
    delete:
      description: "Dis-associates the Image from the Role."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/roles/{roleId}/images/{imageId}/actions/replace/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/imageId'
    post:
      description: >-
        Replaces an Image in-place.
        This allows you to replace an Image without having to dis-associate it and then associate a new one,
        which may not be possible if a Farm Role is currently using this Image.

      parameters:
        - $ref: '#/parameters/RoleImageObject'
      responses:
        200:
          $ref: '#/responses/RoleImageDetails'

  /{envId}/roles/{roleId}/global-variables/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
    get:
      description: "Describes all Global Variables associated with the Role."
      responses:
        200:
          $ref: '#/responses/GlobalVariableList'
    post:
      description: "Declares a new Global Variable for the Role."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        201:
          $ref: '#/responses/GlobalVariableDetails'

  /{envId}/roles/{roleId}/global-variables/{globalVariableName}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/globalVariableName'
    get:
      description: "Retrieves a Global Variable's value in the Role's scope."
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    patch:
      description: "Updates a Global Variable's value in the Role's scope."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    delete:
      description: "Deletes a Global Variable from this Role's scope."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/roles/{roleId}/orchestration-rules/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
    get:
      description: "Describes Orchestration Rules associated with the Role, including Rules from other Scopes (those are read-only)."
      responses:
        200:
          $ref: '#/responses/OrchestrationRuleList'
    post:
      description: "Associates a new Orchestration Rule with the Role."
      parameters:
        - $ref: '#/parameters/OrchestrationRuleObject'
      responses:
        201:
          $ref: '#/responses/OrchestrationRuleDetails'

  /{envId}/roles/{roleId}/orchestration-rules/{orchestrationRuleId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/orchestrationRuleId'
    get:
      description: "Retrieves the specified Orchestration Rule associated with the Role."
      responses:
        200:
          $ref: '#/responses/OrchestrationRuleDetails'
    patch:
      description: "Updates the specified Orchestration Rule."
      parameters:
        - $ref: '#/parameters/OrchestrationRuleObject'
      responses:
        200:
          $ref: '#/responses/OrchestrationRuleDetails'
    delete:
      description: "Deletes the specified Orchestration Rule associated with the Role."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'


  ##########
  # Images #
  ##########

  /{envId}/images/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Images available in the Environment."
      responses:
        200:
          $ref: '#/responses/ImageList'
    post:
      description: "Register a new Image in the Environment."
      parameters:
        - $ref: '#/parameters/ImageObject'
      responses:
        201:
          $ref: '#/responses/ImageDetails'

  /{envId}/images/{imageId}/:
    parameters:
        - $ref: '#/parameters/envId'
        - $ref: '#/parameters/imageId'
    get:
      description: "Retrieves an Image."
      responses:
        200:
          $ref: '#/responses/ImageDetails'
    patch:
      description: "Changes Image attributes. Only the name be can changed."
      parameters:
        - name: image
          in: body
          description: "The updated definition."
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          $ref: '#/responses/ImageDetails'
    delete:
      description: "Deregisters an Image from the Environment."
      parameters:
        - name: deleteFromCloud
          # TODO - Consider making the request body a 'DeleteRequest' instead.
          description: "Attempt to delete this Image from the Cloud."
          in: query
          type: boolean
          required: false
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'
        202:
          description: "Image scheduled for deregistration and deletion from cloud."
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/images/{imageId}/actions/copy/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/imageId'
    post:
      description: "Copies an image from one EC2 region to another."
      parameters:
        - name: copyTo
          description: "The EC2 region to copy this Image to."
          in: body
          required: true
          schema:
            $ref: '#/definitions/CloudLocation'
      responses:
        202:
          $ref: '#/responses/ImageDetails'

  ###########
  # Servers #
  ###########

  /{envId}/servers/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Servers from the Environment."
      responses:
        200:
          $ref: '#/responses/ServerSummaryList'

  /{envId}/servers/{serverId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/serverId'
    get:
      description: "Describes detailed information about the Server."
      responses:
        200:
          $ref: '#/responses/ServerSummaryDetails'

  /{envId}/servers/{serverId}/actions/suspend/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/serverId'
    post:
      description: "Suspends a Server."
      responses:
        200:
          $ref: '#/responses/ServerSummaryDetails'

  /{envId}/servers/{serverId}/actions/terminate/: 
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/serverId'
    post:
      description: "Terminates a Server."
      parameters:
        - name: serverTerminationOptions
          in: body
          type: object
          description: "Additional options for the Server termination command."
          required: false
          schema:
            properties:
              force:
                type: boolean
                description: "It is used to terminate the Server immediately ignoring scalr.system.server_terminate_timeout."
      responses:
        200:
          $ref: '#/responses/ServerSummaryDetails'

  /{envId}/servers/{serverId}/actions/resume/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/serverId'
    post:
      description: "Resumes a Server."
      responses:
        200:
          $ref: '#/responses/ServerSummaryDetails'

  /{envId}/servers/{serverId}/actions/reboot/: 
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/serverId'
    post:
      description: "Reboots a Server."
      parameters:
        - name: serverRebootOptions
          in: body
          type: object
          description: "Additional options for the Server reboot command."
          required: false
          schema:
            properties:
              hard:
                type: boolean
                description: >-
                  Reboot type. 
                  By default it does soft reboot unless this option is set to true.
                  Beware that some types of the instances do not support soft reboot.
      responses:
        200:
          $ref: '#/responses/ServerSummaryDetails'

  /{envId}/farms/{farmId}/servers/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
    get:
      description: "Describes all Servers which correspond to the Farm."
      responses:
        200:
          $ref: '#/responses/ServerSummaryList'

  /{envId}/farm-roles/{farmRoleId}/servers/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes all Servers which correspond to the Farm Role."
      responses:
        200:
          $ref: '#/responses/ServerSummaryList'

  ###########
  # Scripts #
  ###########

  /{envId}/scripts/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Scripts available in the Environment."
      responses:
        200:
          $ref: '#/responses/ScriptList'
    post:
      description: "Creates a new Script in this Environment."
      parameters:
        - $ref: '#/parameters/ScriptObject'
      responses:
        201:
          $ref: '#/responses/ScriptDetails'

  /{envId}/scripts/{scriptId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/scriptId'
    get:
      description: "Describes detailed information about the Script."
      responses:
        200:
          $ref: '#/responses/ScriptDetails'
    patch:
      description: "Changes Script attributes."
      parameters:
        - $ref: '#/parameters/ScriptObject'
      responses:
        200:
          $ref: '#/responses/ScriptDetails'
    delete:
      description: "Deletes the specified Script from the Environment."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/scripts/{scriptId}/script-versions/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/scriptId'
    get:
      description: "Describes all versions for the specified Script."
      responses:
        200:
          $ref: '#/responses/ScriptVersionList'
    post:
      description: "Creates a new Script Version for the Script."
      parameters:
        - $ref: '#/parameters/ScriptVersionObject'
      responses:
        201:
          $ref: '#/responses/ScriptVersionDetails'
    delete:
      description: "Deletes the Script Version from the Script."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/scripts/{scriptId}/script-versions/{scriptVersionNumber}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/scriptId'
      - $ref: '#/parameters/scriptVersionNumber'
    get:
      description: "Describes detailed information about a specified Script Version."
      responses:
        200:
          $ref: '#/responses/ScriptVersionDetails'
    patch:
      description: "Modifies Script Version attributes."
      parameters:
        - $ref: '#/parameters/ScriptVersionObject'
      responses:
        200:
          $ref: '#/responses/ScriptVersionDetails'

  ######
  # OS #
  ######

  /{envId}/os/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes a list of Operating Systems available in the Environment."
      responses:
        200:
          $ref: '#/responses/OsList'

  /{envId}/os/{osId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/osId'
    get:
      description: "Describes detailed info about specified OS."
      responses:
        200:
          $ref: '#/responses/OsDetails'

  ##########
  # Events #
  ##########

  /{envId}/events/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Events available in the Environment."
      responses:
        200:
          $ref: '#/responses/EventList'
    post:
      description: "Creates a new Custom Event in the Environment."
      parameters:
        - $ref: '#/parameters/EventObject'
      responses:
        201:
          $ref: '#/responses/EventDetails'

  /{envId}/events/{eventId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/eventId'
    get:
      description: "Describes detailed information about an Event."
      responses:
        200:
          $ref: '#/responses/EventDetails'
    patch:
      description: "Modifies Event attributes."
      parameters:
        - $ref: '#/parameters/EventObject'
      responses:
        200:
          $ref: '#/responses/EventDetails'
    delete:
      description: "Deletes the Event from the Environment."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  #########
  # Farms #
  #########

  /{envId}/farms/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Farms available in the Environment."
      responses:
        200:
          $ref: '#/responses/FarmList'
    post:
      description: "Creates a new Farm in the Environment."
      parameters:
        - $ref: '#/parameters/FarmObject'
      responses:
        201:
          $ref: '#/responses/FarmDetails'

  /{envId}/farms/{farmId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
    get:
      description: "Describes detailed information about a specified Farm."
      responses:
        200:
          $ref: '#/responses/FarmDetails'
    patch:
      description: "Modifies Farm attributes."
      parameters:
        - $ref: '#/parameters/FarmObject'
      responses:
        200:
          $ref: '#/responses/FarmDetails'
    delete:
      description: "Deletes the Farm from the Environment."
      responses:
        200:
          description: "Farm deleted."
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/farms/{farmId}/actions/launch/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
    post:
      description: "Appoints farm launch."
      responses:
        200:
          $ref: '#/responses/FarmDetails'


  /{envId}/farms/{farmId}/actions/terminate/:
     parameters:
       - $ref: '#/parameters/envId'
       - $ref: '#/parameters/farmId'
     post:
       description: "Appoints farm termination."
       parameters:
         - name: terminateFarmRequest
           in: body
           type: object
           description: "Terminate Farm options."
           required: false
           schema:
             properties:
               force:
                 type: boolean
                 description: "Skip all shutdown routines (Do not process the BeforeHostTerminate event)."
             required:
              - force
       responses:
         200:
           $ref: '#/responses/FarmDetails'

  /{envId}/farms/{farmId}/actions/clone/:
     parameters:
       - $ref: '#/parameters/envId'
       - $ref: '#/parameters/farmId'
     post:
       description: "Clones specified Farm."
       parameters:
         - name: cloneFarmRequest
           in: body
           type: object
           description: "Clone Farm options."
           required: true
           schema:
             properties:
               name:
                 type: string
                 description: "The name of a new Farm."
             required:
               - name
       responses:
         200:
           $ref: '#/responses/FarmDetails'

  /{envId}/farms/{farmId}/global-variables/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
    get:
      description: "Describes all Global Variables associated with the Farm."
      responses:
        200:
          $ref: '#/responses/GlobalVariableList'
    post:
      description: "Declares a new Global Variable for the Farm."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        201:
          $ref: '#/responses/GlobalVariableDetails'

  /{envId}/farms/{farmId}/global-variables/{globalVariableName}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
      - $ref: '#/parameters/globalVariableName'
    get:
      description: "Retrieves a Global Variable's value in this Farm's scope"
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    patch:
      description: "Updates a Global Variable's value in this Farm's scope."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    delete:
      description: "Deletes a Global Variable from this Farm's scope."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  ##############
  # Farm Roles #
  ##############

  /{envId}/farms/{farmId}/farm-roles/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmId'
    get:
      description: "Describes all Farm Roles."
      responses:
        200:
          $ref: '#/responses/FarmRoleList'
    post:
      description: "Creates a new Farm Role."
      parameters:
        - $ref: '#/parameters/FarmRoleObject'
      responses:
        201:
          $ref: '#/responses/FarmRoleDetails'


  /{envId}/farm-roles/{farmRoleId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes detailed information about a specified Farm Role."
      responses:
        200:
          $ref: '#/responses/FarmRoleDetails'
    patch:
      description: "Modifies Farm Role attributes."
      parameters:
        - $ref: '#/parameters/FarmRoleObject'
      responses:
        200:
          $ref: '#/responses/FarmRoleDetails'
    delete:
      description: "Removes the specified Farm Role."
      responses:
        200:
          description: "Farm Role deleted."
          $ref: '#/responses/DeleteSuccessResponse'


  /{envId}/farm-roles/{farmRoleId}/placement/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes the Placement configuration of the Farm Role."
      responses:
        200:
          $ref: '#/responses/PlacementConfigurationDetails'
    patch:
      description: "Modifies the Placement configuration of the Farm Role."
      parameters:
        - $ref: '#/parameters/PlacementConfigurationObject'
      responses:
        200:
          $ref: '#/responses/PlacementConfigurationDetails'

  /{envId}/farm-roles/{farmRoleId}/instance/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes the Instance configuration of the Farm Role."
      responses:
        200:
          $ref: '#/responses/InstanceConfigurationDetails'
    patch:
      description: "Modifies the Instance configuration of the Farm Role."
      parameters:
        - $ref: '#/parameters/InstanceConfigurationObject'
      responses:
        200:
          $ref: '#/responses/InstanceConfigurationDetails'

  /{envId}/farm-roles/{farmRoleId}/actions/import-server/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    post:
      description: >-
        Imports the specified server from the cloud to Scalr Farm Role.
      parameters:
        - name: importServerRequest
          in: body
          type: object
          description: "Import Server request data."
          required: true
          schema:
            properties:
              cloudServerId:
                type: string
                description: "Identifier of the instance on the cloud to import."
              tags:
                type: array
                description: "The list of the tags which should be applied to the server on the Cloud."
                items:
                  $ref: "#/definitions/Tag"
            required:
              - cloudServerId
      responses:
         201:
           $ref: '#/responses/ServerSummaryDetails'

  /{envId}/farm-roles/{farmRoleId}/scaling/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes the Scaling configuration of the Farm Role."
      responses:
        200:
          $ref: '#/responses/ScalingConfigurationDetails'
    post:
      description: "Adds a new Scaling Rule to the Farm Role."
      parameters:
        - $ref: '#/parameters/ScalingRuleObject'
      responses:
        201:
          $ref: '#/responses/ScalingConfigurationDetails'
    patch:
      description: "Modifies the Scaling configuration of the Farm Role."
      parameters:
        - $ref: '#/parameters/ScalingConfigurationObject'
      responses:
        200:
          $ref: '#/responses/ScalingConfigurationDetails'

  /{envId}/farm-roles/{farmRoleId}/scaling/{metricName}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
      - $ref: '#/parameters/metricName'
    get:
      description: "Describes the Scaling rules of the Farm Role."
      responses:
        200:
          $ref: '#/responses/ScalingRuleDetails'
    patch:
      description: "Modifies the Scaling rules of the Farm Role."
      parameters:
        - $ref: '#/parameters/ScalingRuleObject'
      responses:
        200:
          $ref: '#/responses/ScalingRuleDetails'
    delete:
      description: "Deletes the Scaling rules from the Farm Role."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/scaling-metrics/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Scaling metrics available in the Environment."
      responses:
        200:
          $ref: '#/responses/ScalingMetricList'
    post:
      description: "Adds a new custom Scaling metric to the Environment."
      parameters:
        - $ref: '#/parameters/ScalingMetricObject'
      responses:
        201:
          $ref: '#/responses/ScalingMetricDetails'

  /{envId}/scaling-metrics/{metricName}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/metricName'
    get:
      description: "Describes an information about specified Scaling metric."
      responses:
        200:
          $ref: '#/responses/ScalingMetricDetails'
    patch:
      description: "Modifies a Scaling metric attributes."
      parameters:
        - $ref: '#/parameters/ScalingMetricObject'
      responses:
        200:
          $ref: '#/responses/ScalingMetricDetails'
    delete:
      description: "Deletes the specified Scaling metric."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/farm-roles/{farmRoleId}/global-variables/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
    get:
      description: "Describes Global Variables associated with this Farm role."
      responses:
        200:
          $ref: '#/responses/GlobalVariableList'
    post:
      description: "Declares a new Global Variable for this Farm role."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        201:
          $ref: '#/responses/GlobalVariableDetails'

  /{envId}/farm-roles/{farmRoleId}/global-variables/{globalVariableName}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
      - $ref: '#/parameters/globalVariableName'
    get:
      description: "Retrieves a Global Variable's value in this Farm role's scope."
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    patch:
      description: "Updates a Global Variable's value in this Farm role's scope."
      parameters:
        - $ref: '#/parameters/GlobalVariableObject'
      responses:
        200:
          $ref: '#/responses/GlobalVariableDetails'
    delete:
      description: "Deletes a Global Variable from this Farm role's scope."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  /{envId}/farm-roles/{farmRoleId}/orchestration-rules/:
      parameters:
        - $ref: '#/parameters/envId'
        - $ref: '#/parameters/farmRoleId'
      get:
        description: "Describes all Orchestration Rules associated with this Farm Role, including Rules from other Scopes (those are read-only)."
        responses:
          200:
            $ref: '#/responses/OrchestrationRuleList'
      post:
        description: "Associates a new Orchestration Rule with this Farm Role."
        parameters:
          - $ref: '#/parameters/OrchestrationRuleObject'
        responses:
          201:
            $ref: '#/responses/OrchestrationRuleDetails'

  /{envId}/farm-roles/{farmRoleId}/orchestration-rules/{orchestrationRuleId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/farmRoleId'
      - $ref: '#/parameters/orchestrationRuleId'
    get:
      description: "Retrieves an Orchestration Rule."
      responses:
        200:
          $ref: '#/responses/OrchestrationRuleDetails'
    patch:
      description: "Updates an Orchestration rule."
      parameters:
        - $ref: '#/parameters/OrchestrationRuleObject'
      responses:
        200:
          $ref: '#/responses/OrchestrationRuleDetails'
    delete:
      description: "Deletes an Orchestration Rule associated with this Farm Role."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

  #####################
  # Cloud Credentials #
  #####################

  /{envId}/cloud-credentials/:
    parameters:
      - $ref: '#/parameters/envId'
    get:
      description: "Describes all Cloud Credentials available in the Environment."
      responses:
        200:
          $ref: '#/responses/CloudCredentialsSummaryList'
    post:
      description: "Creates a new Cloud Credentials in the Environment."
      parameters:
        - $ref: '#/parameters/CloudCredentialsObject'
      responses:
        201:
          $ref: '#/responses/CloudCredentialsDetails'

  /{envId}/cloud-credentials/{cloudCredentialsId}/:
    parameters:
      - $ref: '#/parameters/envId'
      - $ref: '#/parameters/cloudCredentialsId'
    get:
      description: >-
        Gets detailed information about specified Cloud Credentials.
        You can only obtain information about Cloud Credentials from the Environment scope.

      responses:
        200:
          $ref: '#/responses/CloudCredentialsDetails'
    patch:
      description: "Modifies Cloud Credentials attributes."
      parameters:
        - $ref: '#/parameters/CloudCredentialsObject'
      responses:
        200:
          $ref: '#/responses/CloudCredentialsDetails'
    delete:
      description: "Deletes the specified Cloud Credentials from the Environment."
      responses:
        200:
          $ref: '#/responses/DeleteSuccessResponse'

###############
# Definitions #
###############

definitions:
  CloudCredentialsSummary:
    properties:
      id:
        type: string
        readOnly: true
        description: "Unique identifier of Cloud Credentials object."
        <<: *uuidShortRegExp
      name:
        type: string
        description: "Unique name of the Cloud Credentials."
      description:
        type: string
      cloudCredentialsType:
        type: string
        enum:
          - AwsCloudCredentials
          - GceCloudCredentials
          - AzureCloudCredentials
          - CloudstackCloudCredentials
          - OpenstackCloudCredentials
          - RackspaceCloudCredentials
        description: "Cloud Platform this resources resides in."
      status:
        type: string
        enum:
          - disabled
          - enabled
          - suspended
        readOnly: true
        description: "The status of Cloud Credentials."
      scope:
        <<: *scopeProperty
        readOnly: true
        type: string
        description: "The scope in which the Cloud Credentials are added."
      provider:
        type: string
        description: "Cloud provider for Openstack or Cloudstack based clouds."

    required:
      - name
      - cloudCredentialsType

    x-createOnly:
      - cloudCredentialsType

    x-filterable:
      - name
      - cloud
      - status
      - scope
      - provider


  CloudCredentials:
    discriminator: cloudCredentialsType

    allOf:
      - $ref: '#/definitions/CloudCredentialsSummary'


  AwsDetailedBilling:
    properties:
      payerAccount:
        type: string
        description: "Payer AWS account number."
      cloudLocation:
        type: string
        description: "Billing bucket region."
      bucket:
        type: string
        description: "Billing bucket name."


  AwsCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          accountType:
            type: string
            enum:
              - regular
              - govcloud
              - china
            default: regular
            description: "AWS Account type."
          accessKey:
            type: string
            description: "Acces key ID."
          secretKey:
            type: string
            description: "The secret key."
          accountId:
            type: string
            readOnly: true
            description: "AWS Account ID."
          billing:
            $ref: "#/definitions/AwsDetailedBilling"

      - required:
          - accountType
          - accessKey
          - secretKey

      - x-filterable:
          - accountType


  GceCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          projectId:
            type: string
            description: "GCE project ID."
          clientId:
            type: string
            description: "GCE client ID."
          accountName:
            type: string
            description: "The service account name."
          privateKey:
            type: string
            format: byte
            description: "Private key with boundary."

      - required:
          - projectId
          - clientId
          - accountName
          - privateKey

  OpenstackCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          keystoneUrl:
            type: string
            description: "Keystone URL."
          userName:
            type: string
            description: "The user name."
          password:
            type: string
            description: "The password for the user."
          tenantName:
            type: string
            description: "The tenant name."
          domainName:
            type: string
            description: "Domain name. It must be provided for the Identity API v3."
          sslVerification:
            type: boolean
            description: "Specifies whether it should verify SSL Certificate."
          provider:
            <<: *openstackProvider

      - required:
          - provider
          - keystoneUrl
          - userName
          - password
          - tenantName

      - x-createOnly:
          - provider

  CloudstackCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          apiUrl:
            type: string
            description: "The URL like: http(s)://<cloudstack_ip>:<cloudstack_port>/client/api."
          apiKey:
            type: string
            description: "The API key."
          secretKey:
            type: string
            description: "The secret key."
          provider:
            <<: *cloudstackProvider

      - required:
          - provider
          - apiUrl
          - apiKey
          - secretKey

      - x-createOnly:
          - provider

  RackspaceCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          userName:
            type: string
            description: "The user name."
          apiKey:
            type: string
            description: "The API access key."
          isUk:
            type: boolean
            description: "Indicates is Rackspace UK."

      - required:
          - userName
          - apiKey

      - x-createOnly:
          - isUk

  AzureCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          tenantName:
            type: string
            description: "The Azure Active Directory name."
          subscription:
            type: string
            description: "The Azure Subscription ID."

      - required:
          - tenantName
          - subscription

  GlobalVariable:
    required:
      - name
    # No filtering is available on Global Variables fo performance reasons.
    x-createOnly:
      - name
    properties:
      name:
        type: string
      value:
        description: "The value declared in the current scope for this variable.  null allows inheritance. Any other value overrides inheritance.  This is ignored if `declaredIn` is not the current scope."
        type: string
      category:
        description: "Category of the variable."
        type: string
      declaredIn:
        description: "Whether this variable is declared in the current scope."
        <<: *scopeProperty
        readOnly: true
      locked:
        description: "Whether this variable is locked in inner scopes. This is read-only if `declaredIn` is not the current scope."
        type: boolean
      hidden:
        description: "Whether this variable is hidden in inner scopes. This is read-only if `declaredIn` is not the current scope."
        type: boolean
      requiredIn:
        description: "The scope where this variable is required. This is read-only if `declaredIn` is not the current scope."
        <<: *scopeProperty
      outputFormat:
        description: "The formatting to apply when formatting this variable. This is read-only if `declaredIn` is not the current scope."
        type: string
      validationPattern:
        description: "A validation pattern to apply in inner scopes. This is read-only if `declaredIn` is not the current scope."
        type: string
      description:
        description: "A description that explains what this Global Variable is used for."
        type: string
      computedValue:
        description: "The value computed by Scalr for this variable."
        type: string
        readOnly: true
      computedCategory:
        description: "The category computed by Scalr for this variable."
        type: string
        readOnly: true

  Role:
    required:
      - name
      - category
      - os
    x-filterable:
      - id
      - name
      - os
      - category
      - scope
      - quickStart
      - deprecated
      - useScalrAgent
      - builtinAutomation
    x-createOnly:
      - useScalrAgent
      - builtinAutomation
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      description:
        type: string
      os:
        $ref: '#/definitions/OsForeignKey'
      category:
        $ref: '#/definitions/RoleCategoryForeignKey'
      scope:
        <<: *scopeProperty
        readOnly: true
      quickStart:
        type: boolean
        description: "Whether it is QuickStart Role."
      useScalrAgent:
        type: boolean
        description: "Using Scalarizr (Scalr agent)."
      deprecated:
        type: boolean
        description: "Whether the Role is deprecated."
      builtinAutomation:
        type: array
        items:
          type: string
          enum:
            - base
            - chef
            - mysql
            - percona
            - mariadb
            - postgresql
            - mongodb
            - redis
            - apache
            - nginx
            - tomcat
            - haproxy
            - rabbitmq
            - memcached


  RoleCategory:
    required:
      - name
    x-filterable:
      - id
      - name
      - scope
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      scope:
        <<: *scopeProperty
        readOnly: true

  Image:
    required:
      - name
      - cloudPlatform
      - cloudImageId
      - architecture
      - os
    x-filterable:
      - id
      - name
      - scope
      - cloudPlatform
      - cloudLocation
      - cloudImageId
      - architecture
      - source
      - status
      - deprecated
      - os
      - scalrAgentInstalled
      - cloudInitInstalled
    x-createOnly:
      - scalrAgentInstalled
      - cloudInitInstalled
    properties:
      id:
        type: string
        readOnly: true
        <<: *uuidRegExp
      name:
        type: string
      scope:
        <<: *scopeProperty
        readOnly: true

      cloudImageId:
        type: string
      size:
        type: integer
        readOnly: true
      type:
        description: "(Only used on EC2 currently) Whether this Image is HVM or EBS."
        type: string
        readOnly: true
      scalrAgentInstalled:
        description: "Scalarizer is installed."
        type: boolean
      cloudInitInstalled:
        description: "Install scalarizr via cloud-init at instance launch."
        type: boolean
      <<: *cloudLocationProperties

      source:
        description: "Indicates how this Image was created."
        type: string
        enum:
          - Manual
          - BundleTask
        readOnly: true
      # bundleTask: pending on an API for Bundle Tasks
      # createdBy pending on an API for users

      os:
        $ref: '#/definitions/OsForeignKey'
      architecture:
        <<: *architectureProperty

      added:
        description: "Date and time when this Image was created."
        type: string
        format: date-time
        readOnly: true
      lastUsed:
        description: "Date and time when this Image was last used."
        type: string
        format: date-time
        readOnly: true

      status:
        description: "Current status for this Image. That `failed` means deletion failed."
        type: string
        enum:
          - active
          - pending_delete
          - failed
        readOnly: true
      statusError:
        description: "If the Image is in a failed state, this indicates why."
        type: string
        readOnly: true

      deprecated:
        description: "Whether this Image is deprecated."
        type: boolean
        readOnly: true

  RoleImage:
    description: "A Representation of a Role Image. Note that the `role` property is optional when POST-ing to a URL that already includes `{roleId}`."
    required:
      - role
      - image
    x-filterable:
      - role
      - image
    properties:
      role:
        $ref: '#/definitions/RoleForeignKey'
      image:
        $ref: '#/definitions/ImageForeignKey'


  Script:
    x-filterable:
      - id
      - name
      - osType
      - blockingDefault
      - scope
    required:
      - name
      - osType
    x-createOnly:
      - osType
    properties:
      id:
        type: integer
        readOnly: true

      name:
        type: string

      scope:
        <<: *scopeProperty
        readOnly: true

      description:
        type: string

      added:
        type: string
        format: date-time
        readOnly: true

      lastChanged:
        type: string
        format: date-time
        readOnly: true

      osType:
        # Ideally this would be a FK of sorts, but there is no object to point to.
        # The user is expected to tell us whether this script should execute.
        type: string
        enum:
          - linux
          - windows
        description: "Type of OS this Script should execute on. This will influence Orchestration Rules, an will trigger validation on individual ScriptVersion's you upload."

      blockingDefault:
        # No filtering available here because there is largely no use case for it (and a big performance cost)
        type: boolean

      timeoutDefault:
        type: integer

      #useScriptParameters:
      #  type: boolean
      #  default: false
      #  desciption: "Whether Script Parameters (%param%) should be used for this Script."

      ## createdBy - We'll add when we have an API for users

  ScriptVersionForeignKey:
    required:
      - script
    x-createOnly:
      - script
    x-filterable:
      - script
    properties:
      script:
        $ref: '#/definitions/ScriptForeignKey'
        description: "The Script this ScriptVersion is a version of."

      version:
        type: integer
        readOnly: true
        description: "The Script version number. NULL is interpreted as the Latest Version."

  ScriptVersion:
    allOf:
      - $ref: '#/definitions/ScriptVersionForeignKey'
      - required:
        - body
      - properties:
          added:
            type: string
            format: date-time
            readOnly: true

          body:
            type: string
            description: "The contents of this ScriptVersion, those will be validated as per the Script's OS Type."

          # changedBy - We'll add when we have an API for it

  Event:
    required:
      - id
    x-filterable:
      - id
      - scope
    x-createOnly:
      - id
    properties:
      # For the purposes of the API, we'll expose the Event name as its ID,
      # since internally Scalr never references IDs.
      id:
        type: string
        description: "The name of this custom event."
        pattern: "[A-Za-z0-9]+"

      scope:
        #TODO - Reduce duplication on readOnly
        <<: *scopeProperty
        readOnly: true

      description:
        type: string


  CloudLocation:
    required:
      - cloudPlatform
    x-filterable:
      - cloudPlatform
      - cloudLocation
    properties:
      <<: *cloudLocationProperties

  Os:
    required:
      - id
      - name
      - family
      - generation
      - version
    x-filterable:
      - id
      - name
      - family
      - generation
    properties:
      id:
        type: string
        description: "An ID uniquely identifying this OS in Scalr."
        pattern: "[A-Za-z0-9-]+"
      name:
        type: string
        description: "A human-readable name for this OS."
      family:
        type: string
        enum:
          - oel
          - debian
          - ubuntu
          - rhel
          - redhat
          - centos
          - amazon
          - windows
      generation:
        type: string
      # Note: there will need to be some validation that family and generation match!
      version:
        type: string


  OrchestrationRule:
    required:
      - trigger
      - action
      - target
    x-filterable:
      - id
      - blocking
      - order
      - runAs
    properties:
      id:
        type: integer
        readOnly: true

      scope:
        <<: *scopeProperty
        readOnly: true

      # When?
      trigger:
        $ref: '#/definitions/Trigger'

      # What?
      action:
        $ref: '#/definitions/Action'

      # Where?
      target:
        $ref: '#/definitions/Target'

      # Execution options
      blocking:
        type: boolean
        description: "Should this Orchestration Rule's execution delay the execution of further Orchestration Rules and triggering of further Events? Defaults to the action's default when null."

      timeout:
        type: integer
        description: "How long should Scalr wait before aborting the execution of this Orchestration Rule? Defaults to the action's default when null."

      order:
        type: integer
        description: "When should this Orchestration Rule execute relative to other Orchestration Rules that use the same triggeringEvent? Default is relative to existing Rules."

      runAs:
        type: string
        descrition: "User the Orchestration Rule should execute as. Defaults to root / Administrator when null."


  Trigger:
    discriminator: triggerType
    properties:
      triggerType:
        type: string
        enum:
          - AllEventsTrigger
          - SpecificEventTrigger
    required:
      - triggerType

  AllEventsTrigger:
    allOf:
      - $ref: "#/definitions/Trigger"
      - description: "Triggers when any Event fires."

  SpecificEventTrigger:
    allOf:
      - $ref: "#/definitions/Trigger"
      - description: "Triggers when a specific Event fires."
      - properties:
          event:
            $ref: '#/definitions/Event'


  Action:
    discriminator: actionType
    properties:
      actionType:
        type: string
        enum:
          - ScriptAction
          - UriAction
          - ChefAction
    required:
      - actionType

  ScriptAction:
    allOf:
      - $ref: "#/definitions/Action"
      - properties:
          scriptVersion:
            $ref: '#/definitions/ScriptVersionForeignKey'
            description: "ScriptVersion to execute."
        required:
          - scriptVersion

  UriAction:
    allOf:
      - $ref: "#/definitions/Action"
      - properties:
          path:
            type: string
            description: "Path or URL to the script to execute."
        required:
          - path

  # TODO: design ChefAction
  ChefAction:
    allOf:
      - $ref: "#/definitions/Action"


  Target:
    discriminator: targetType
    properties:
      targetType:
        type: string
        enum:
          - NullTarget
          - TriggeringServerTarget
          - TriggeringFarmRoleTarget
          - SelectedFarmRolesTarget
          - FarmTarget
    required:
      - targetType


  NullTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects no Server at all."

  TriggeringServerTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects the Server that triggered the Event."

  TriggeringFarmRoleTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects all Servers of the triggering Server's Farm Role."

  SelectedFarmRolesTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - properties:
          roles:
            type: array
            items:
              $ref: "#/definitions/FarmRoleForeignKey"
      - description: "Selects all Servers with specified Roles."

  FarmTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects all Servers of the triggering Server's Farm"


  #OrchestrationRuleScriptParameter:
  #  properties:
  #    orchestrationRule:
  #      $ref: "#/definitions/OrchestrationRuleForeignKey"

  #    name:
  #      type: string
  #      description: "Name of the Scripting Parameter"

  #    value:
  #      type: string
  #      description: "Value of the Scripting Parameter"

  #  required:
  #    - orchestrationRule
  #    - name
  #    - value


  # TODO - Add extra properties here

  CostCenter:
    x-filterable:
      - id
      - name
      - billingCode

    properties:
      id:
        type: string
        readOnly: true
        <<: *uuidRegExp

      billingCode:
        type: string
        readOnly: true

      name:
        type: string

    required:
      - name


  Project:
    required:
      - costCenter
      - billingCode
      - leadEmail
      - name
    x-filterable:
      - id
      - name
      - costCenter
      - billingCode
    x-createOnly:
      - costCenter
      - billingCode
      - leadEmail
    properties:
      id:
        type: string
        readOnly: true
        <<: *uuidRegExp

      costCenter:
        $ref: "#/definitions/CostCenterForeignKey"

      name:
        type: string

      billingCode:
        type: string

      leadEmail:
        type: string

      description:
        type: string

  Farm:
    properties:
      id:
        type: integer
        readOnly: true

      name:
        type: string

      project:
        $ref: "#/definitions/ProjectForeignKey"

      vpc:
        # VPCs may, at some point, be exposed in the Scalr API.
        # For now, the user should wrap the VPC ID into a {"id": ...} structure.
        $ref: "#/definitions/CloudAwsVpcForeignKey"

      timezone:
        type: string

      launchOrder:
        type: string
        enum:
          - simulatenous
          - sequential

      description:
        type: string

      owner:
        description: "Identifier of the User who owns the Farm."
        $ref: "#/definitions/UserForeignKey"

      teams:
        description: "List of the Teams that have access to the Farm."
        type: array
        items:
          $ref: "#/definitions/TeamForeignKey"

      # TODO - Agent Repository should be exposed in the API

    required:
      - name
      - project

    x-filterable:
      - id
      - name
      - vpc
      - project
      - launchOrder
      - owner
      - teams
      - timezone

  UserForeignKey:
    properties:
      id:
        type: integer
        description: "Identifier of the User."
    required:
      - id

  TeamForeignKey:
    properties:
      id:
        type: integer
        description: "Identifier of the Team."
    required:
      - id

  FarmRole:
    x-filterable:
      - id
      - farm
      - role
      - platform

    properties:
      id:
        type: integer
        readOnly: true

      # Overall settings #

      farm:
        $ref: "#/definitions/FarmForeignKey"
        readOnly: true
        description: "Farm this Farm Role should be added to."

      role:
        # TODO - Image replace should be made consistent here.
        $ref: "#/definitions/RoleForeignKey"

      alias:
        type: string
        description: "The Alias for this Farm Role. If this isn't provided, it will default to the Role's name (possibly with '-n' appended if the Role name is already taken)"

      platform:
        type: string
        description: "Farm Role platform."

      placement:
        $ref: "#/definitions/PlacementConfiguration"

      instance:
        $ref: "#/definitions/InstanceConfiguration"

      scaling:
        $ref: "#/definitions/ScalingConfiguration"

    required:
      - role
      - platform
      - placement
      - instance
      - alias

  PlacementConfiguration:
    discriminator: placementConfigurationType

    properties:
      placementConfigurationType:
        type: string
        enum:
          - AwsClassicPlacementConfiguration
          - AwsVpcPlacementConfiguration
          - OpenStackPlacementConfiguration
          - CloudStackPlacementConfiguration
          - GcePlacementConfiguration
      region:
        type: string

    required:
      - placementConfigurationType
      - region

  AwsClassicPlacementConfiguration:
    allOf:
      - $ref: "#/definitions/PlacementConfiguration"
      - properties:
          availabilityZones:
            description: "The list of available zones. If it's empty array - will be distributed equally, if availabilityZone property is not present or it's NULL - means will be chosen by AWS."
            type: array
            items:
              type: string


  AwsVpcPlacementConfiguration:
    allOf:
      - $ref: "#/definitions/PlacementConfiguration"
      - properties:
          subnets:
            type: array
            items:
              $ref: '#/definitions/CloudAwsVpcSubnetForeignKey'

          router:
            $ref: "#/definitions/FarmRoleForeignKey"
      - required:
          - subnets
  # TODO - Implement other placements


  InstanceConfiguration:
    discriminator: instanceConfigurationType

    properties:
      instanceConfigurationType:
        type: string
        enum:
          - AwsInstanceConfiguration

      instanceType:
        $ref: "#/definitions/CloudInstanceType"

    required:
      - instanceConfigurationType
      - instanceType

  AwsInstanceConfiguration:
    allOf:
      - $ref: "#/definitions/InstanceConfiguration"
      - properties:
          ebsOptimized:
            type: boolean

  ScalingConfiguration:
    properties:
      enabled:
        type: boolean
      minInstances:
        type: integer
      maxInstances:
        type: integer
      rules:
        type: array
        readOnly: true
        items:
          type: string
          description: "The list of the Scaling Metric's names."

  ScalingMetricForeignKey:
    properties:
      name:
        type: string
        descritpion: "The name of the Scaling Metric."
    required:
      - name
    x-filterable:
      - name

  ScalingMetric:
    allOf:
      - $ref: "#/definitions/ScalingMetricForeignKey"
      - properties:
          filePath:
            type: string
            descritpion: Path to the File
          retrieveMethod:
            type: string
            enum:
              - read
              - execute
              - url-request
            description: "The operation on the File that should be performed to obtain the value of the Metric."
          function:
            type: string
            enum:
              - average
              - sum
              - min
              - max
            description: "Aggregate function to use when executing decision logic."
          inverted:
            type: boolean
            description: >-
              Whether this metric uses inverted logic.
              In case of the inversion it scales up when the value goes under
              instead of scaling down.
          scope:
            <<: *scopeProperty
            readOnly: true

      - required:
         - retrieveMethod
         - filePath
         - function

      - x-filterable:
         - retrieveMethod
         - function
         - inverted
         - scope

  ScalingRule:
    discriminator: ruleType
    allOf:
      - $ref: "#/definitions/ScalingMetricForeignKey"
      - properties:
          ruleType:
            type: string
            enum:
              - BasicScalingRule
              - LoadAveragesScalingRule
              - FreeRamScalingRule
              - UrlResponseTimeScalingRule
              - SqsQueueSizeScalingRule
              - DateAndTimeScalingRule
              - BandWidthScalingRule

      - required:
         - ruleType
      - x-filterable:
         - ruleType
      - x-createOnly:
         - name
         - ruleType

  ScalingRuleThresholds:
    properties:
      scaleUp:
        type: integer
        description: "Scale up threshold."
      scaleDown:
        type: integer
        description: "Scale down threshold."
    required:
      - scaleUp
      - scaleDown

  BasicScalingRule:
    description: >-
        It is used in combination with user defined Scaling Metrics.
    allOf:
      - $ref: "#/definitions/ScalingRule"
      - $ref: "#/definitions/ScalingRuleThresholds"

  LoadAveragesScalingRule:
    description: >-
      Scaling Rule based on the average load.
      Scale up / down values estimate at percents.

    allOf:
      - $ref: "#/definitions/BasicScalingRule"
      - properties:
          calculatingPeriod:
            type: integer
            description: "Period in minutes which is used to aggregate the Metric Value."
      - required:
         - calculatingPeriod

  FreeRamScalingRule:
    description: >-
      Scaling Rule based on the amount of the free RAM.
      Scale up / down values estimate at MB.

    allOf:
      - $ref: "#/definitions/BasicScalingRule"
      - properties:
          useCachedRam:
            type: boolean
            descripiton: "Whether it should use cached RAM in addition to free RAM as scaling metric."

  UrlResponseTimeScalingRule:
    description: >-
        Scaling Rule based on the response time of the specified URL.
        Scale up / down values estimate at seconds.

    allOf:
      - $ref: "#/definitions/BasicScalingRule"
      - properties:
          url:
            type: string
            desctiption: URL to check
      - required:
         - url

  SqsQueueSizeScalingRule:
    description: >-
        Scaling Rule based on the AWS SQS queue size.
        Scale up / down values estimate at quantity.

    allOf:
      - $ref: "#/definitions/BasicScalingRule"
      - properties:
          queue:
            type: string
            description: "The AWS SQS queue name."
      - required:
         - queue

  BandWidthScalingRule:
    description: >-
        Scaling Rule based on network bandwidth.
        Scale up / down values estimate at Mbit/s.

    allOf:
      - $ref: "#/definitions/BasicScalingRule"
      - properties:
          direction:
            type: string
            enum:
              - inbound
              - outbound
      - required:
         - direction

  DateAndTimeScalingRule:
    description: >-
        It defines the number of running instances for the
        specified time frames.

    allOf:
      - $ref: "#/definitions/ScalingRule"
      - properties:
          schedule:
            type: array
            items:
              $ref: "#/definitions/ScalingRuleTimeFrame"
      - required:
         - schedule

  ScalingRuleTimeFrame:
    properties:
      instanceCount:
        type: integer
        description: "The number of the instances which should be running."
      start:
        type: string
        format: date-time
        description: "Start time."
      end:
        type: string
        format: date-time
        description: "End of the frame."
      daysOfWeek:
        type: array
        items:
          type: string
          enum:
            - sun
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
        description: "The days of week which the rule is applied on."
    required:
      - instanceCount
      - start
      - end
      - daysOfWeek

  ServerSummary:
    description: "JSON Representation of the Scalr Server."
    properties:
      id:
        description: "Identifier of the Scalr Server."
        type: string
        readOnly: true
        <<: *uuidRegExp
      farm:
        description: "Identifier of the Farm"
        $ref: "#/definitions/FarmForeignKey"
        readOnly: true
      farmRole:
        description: "Identifier of the Farm Role"
        $ref: "#/definitions/FarmRoleForeignKey"
        readOnly: true
      type:
        description: "The type of the instance."
        type: string
        readOnly: true
      status:
        description: "Server status."
        type: string
        enum:
          - temporary
          - running
          - pending
          - pending_launch
          - initializing
          - importing
          - terminated
          - pending_terminate
          - pending_suspend
          - suspended
          - resuming
        readOnly: true
      cloudPlatform:
        <<: *cloudPlatform
        readOnly: true
      cloudLocation:
        <<: *cloudLocation
        readOnly: true
      launched:
        description: "The date and time the Server was launched."
        type: string
        format: date-time
        readOnly: true
      publicIp:
        type: array
        items:
          type: string
        readOnly: true
        description: "IP address of the public network interface of the Server."
      privateIp:
        type: array
        items:
          type: string
        readOnly: true
        description: "IP address of the private network interface of the Server."
      index:
        type: integer
        readOnly: true
        description: "The index of the Server in the Farm Role."
      launchedBy:
        $ref: "#/definitions/UserForeignKey"
        readOnly: true
        description: "The identifier of the User who launched the Server."
      launchReason:
        type: string
        readOnly: true
        description: "The reason the Server was launched."
      hostname:
        type: string
        readOnly: true
        description: "The hostname of this Server."
    x-filterable:
      - index
      - publicIp
      - privateIp
      - id
      - status
      - cloudPlatform
      - cloudLocation
      - hostname
      - launchReason
      - launchedBy
      - farmRole
      - farm
      - type

  Tag:
    description: "JSON Representation of the Tag."
    properties:
      key:
        description: "The Tag key."
        type: string
      value:
        description: "The Tag value."
        type: string
    required:
      - key

  CloudAwsVpcForeignKey:
    properties:
      id:
        type: string
      region:
        type: string
    required:
      - id

  CloudAwsVpcSubnetForeignKey:
    properties:
      id:
        type: string
      region:
        type: string
    required:
      - id

  CloudInstanceType:
    properties:
      id:
        type: string

  ApiMetaContainer:
    properties:
      sample:
        type: string
        description: "Actual properties TBD."

  ApiMessage:
    properties:
      code:
        type: string
        description: "A machine-readable representation of the message."
      message:
        type: string
        description: "A human-readable representation of the message."

  ApiErrorResponse:
    description: "Common envelope."

  DeleteSuccessResponse:
    allOf:
      - $ref: '#/definitions/ApiErrorResponse'
      - properties:
          data:
            type: string
            readOnly: true

