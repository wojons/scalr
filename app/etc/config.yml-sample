# Scalr\System\Config\Extension class determines the
# structure of this config and defines default values.
# If you add/delete values in this config, mentioned class should be updated accordingly.
scalr:
  connections:
    mysql: &connections_mysql
      host: 'localhost'
      port: ~
      name: scalr
      user: scalr
      pass: 'scalr'

#    # Proxy settings that can be used with option scalr.%platform%.use_proxy = yes
#    # Only aws, azure, openstack-based and cloudstack-based platforms are available
#    proxy:
#      # Proxy host, Default: localhost
#      host: 'localhost'
#      # Proxy port, Default: 3128
#      port: 3128
#      # Auth user. Default: ''
#      user: ''
#      # Auth password. Default: ''
#      pass: ''
#      # Proxy type. Allowed: 4 - socks4, 5 - socks5, 0 - http, Default: 0
#      type: 0
#      # Auth type. Allowed: 1 - Basic, Digest - 2, GSSNeg - 4, NTLM - 8, any - -1, Default: 1
#      authtype: 1
#      # On which side the proxy should be used. Allowed values: scalr, instance, both. Default: both
#      use_on: both

#    # This section is optional and it is required only when you use ldap for user's authentication (scalr.auth_mode: ldap).
#    ldap:
#      host: 'localhost'
#      #port: ~
#      base_dn: 'DC=scalr,DC=local'
#
#      ## Sometimes base_dn_groups can be useful to have different base DN to speed up querying the lits of user's groups.
#      #base_dn_groups: ~
#
#      ## User and password are preferred parameters but not a mandatory.
#      ## They are required when Scalr API is going to be accessed by APIKEY.
#      #user: 'scalradmin@scalr'
#      #pass: 'set password'
#
#      ## If group_nesting is enabled, system will take into consideration group nesting that is little bit slower.
#      #group_nesting: yes
#
#      ## The domain name that will be used when user enters an username without the domain.
#      ## If this option is not provided domain will be evaluated using base_dn data set.
#      #domain: ~
#
#      ## Filters which will be used in the LDAP queries
#      #filter:
#      #  users: "(&(objectCategory=person)(objectClass=user))"
#      #  groups: "(&(objectClass=group))"
#
#      ## When regular binding is used, a user can be authenticated by User logon name (user@domain.com).
#      ## When simple binding is used, a user can be authenticated by Full name, Display name or sAMAccountName
#      ## depends on ldap server configuration. ldap.domain won't be used in this case.
#      ## Allowed values: (regular|simple),  Default value: regular
#      #bind_type: regular
#
#      ## The name of the attribute which contains information about user's email address in the LDAP.
#      ## If this option is not provided the username will be used as email address.
#      ## Possible value: mail
#      #mail_attribute: ~
#
#      ## The name of the attribute which contains information about user's full name in the LDAP.
#      #fullname_attribute: displayName
#
#      ## User name attribute, by default is: sAMAccountName
#      #username_attribute: sAMAccountName
#
#      ## Adds additional debug information to HTTP response headers
#      #debug: no

#    # This section is used as common template for multiple logs
#    logger: &connections_logger
#      # Path represents either PATH for local FS or URL for remote. Default is localhost
#      path: localhost
#
#      ## A port to connect. Default: 8888
#      #port: 8888
#
#      ## Data collector type. Default: fluentd
#      #backend: fluentd
#
#      ## Protocol the logger will connect to a backend with. Default: http
#      ## You may choose either "http" wrapper, or "tcp", or "udp" with respect to your settings
#      #proto: http
#
#      ## The connection will be dropped after N seconds. Default: 1
#      #timeout: 1

#    # This section is optional and it is required only when you use saml for user's authentication (scalr.auth_mode: saml).
#    saml:
#      # Identity Provider settings
#      idp:
#        # Identifier of the IdP entity  (must be a URI)
#        # entityId: https://idp.domain/saml/metadata/777
#        entityId: ~
#        # SSO endpoint info of the IdP. (Authentication Request protocol)
#        singleSignOnService:
#          # URL Target of the IdP where the Scalr will send the Authentication Request Message
#          # url: https://your-labs.idp.domain/trust/saml2/http-post/sso/777
#          url: ~
#        # SLO endpoint info of the IdP.
#        singleLogoutService:
#          # URL Location of the IdP where the Scalr will send the SLO Request
#          # url: https://your-labs.idp.domain/trust/saml2/http-redirect/slo/777
#          url: ~
#        # Instead of use the whole x509cert Scalr requires a fingerprint.
#        # openssl x509 -noout -fingerprint -sha256 -in "idp.crt" to generate it
#        # certFingerprint: 'AA:BB:CC:DD:00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33:44:55:66:77:88:99:AA:00'
#        certFingerprint: ~
#        # certFingerprintAlgorithm is required to know which Algorithm was used.
#        # Possible values: sha256, sha384 or sha512 'sha1' is the default value.
#        certFingerprintAlgorithm: sha256

#  analytics:
#    # Whether it is enabled. Optional, default value: no
#    enabled: yes
#    connections:
#      analytics:
#        <<: *connections_mysql
#        name: analytics
#    #  # You may want to restrict access to the scalr database for analytics scripts
#    #  scalr:
#    #    <<: *connections_mysql
#    ## Polls data from the cloud
#    #poller:
#    #  # Number of threads in pool Default: 50
#    #  pool_size: 50
#    #  # Connection timeout to the cloud provider. Default: 20 seconds
#    #  cloud_connection_timeout: 20
#    #  # Log file
#    #  log_file: '/var/log/scalr.analytics-poller.log'
#    #  # Pid file
#    #  pid_file: '/var/run/scalr.analytics-poller.pid'
#    ## Processes raw data script
#    #processing:
#    #  log_file: '/var/log/scalr.analytics-processing.log'
#    #  pid_file: '/var/run/scalr.analytics-processing.pid'

  # Allowed values: scalr | ldap | saml
  auth_mode: scalr

  # By default it's allowed all available
  allowed_clouds:
  - ec2
  - gce
  - azure

  # cloudstack based
  - cloudstack
  - idcf

  # openstack based
  - openstack
  - ocs
  - rackspacenguk
  - rackspacengus
  - hpcloud
  - mirantis
  - vio
  - cisco

  aws:
    security_group_name: 'scalr.ip-pool'
    # For example ['111.22.33.11/28', '222.22.2.12/28']
    # IP Addresses of servers where scalr installed
    ip_pool: ['8.8.8.8']
    # Default value: 'scalr.'
    security_group_prefix: 'scalr.'
#    use_proxy: no
#    # AWS Client plugins is not mandatory part of the Scalr
#    plugins:
#      # List of the enabled plug-ins. All plug-ins are disabled by default.
#      # Possible values [statistics]
#      enabled: ~
#      # Statistics plugin allows to collect information about AWS queries and errors.
#      statistics:
#        # max_heap_table_size in bytes which is taken into consideration on create table with MEMORY type. Default value: 256Mb
#        storage_max_size: 268435456
#    ec2:
#      limits:
#        # Maximum number of security groups per EC2 instance. (Default: 10)
#        security_groups_per_instance: 10

  billing:
    enabled: no
    chargify_api_key: ''
    chargify_domain: ''
    emergency_phone_number: ''

#  # ScalrPy dbqueue_event script configuration
#  # This section is optional and it is required only when you need non default parameters
#  dbqueue_event:
#    connections:
#      # if 'mysql' not present then use scalr:connections:mysql
#      mysql:
##        host: ~
##        port: 3306
##        name: ~
##        user: ~
##        pass: ~
#        # mysql connection pool size
#        pool_size: 4
#    # size of the worker pool
#    pool_size: 100
#    log_file: '/var/log/scalr.dbqueue-event.log'
#    pid_file: '/var/run/scalr.dbqueue-event.pid'

  dns:
    mysql:
      host: 'localhost'
      port: ~
      name: 'scalr'
      user: 'scalr'
      pass: 'scalr'
    static:
      enabled: no
      nameservers: ['ns1.example-dns.net', 'ns2.example-dns.net']
      domain_name: 'example-dns.net'
    global:
      enabled: no
      nameservers: ['ns1.example.net', 'ns2.example.net', 'ns3.example.net', 'ns4.example.net']
      # base_domain is used for automated generation domain name of the user's servers
      default_domain_name: 'provide.domain.here.in'

  email:
    # Email From address
    address: ~
    # Email From name, Default: null
    name: ~

#  # Miscellaneous cache options
#  cache:
#    instance_types:
#      # Instance types cache lifetime in seconds (Default: 86400)
#      lifetime: 86400

#  cloudyn:
#    master_email: ''
#    # Allowed values: DEV | ITG | QA | PROD Default: PROD
#    environment: PROD

  crontab:
#    heartbeat:
#      # ZMQ MDP heartbeat interval msecs (Default: 18000)
#      delay: 18000
#      # ZMP MDP liveness (Default: 3)
#      liveness: 3

#    sockets:
#      # DSN of the ZMQ MDP broker (Default: ipc://[SYSTEM-TMP-PATH]/[SCALR-ID].broker.ipc)
#      broker: ipc:///tmp/{SCALR_ID}.broker.ipc

#    # Path to the log file of the service. Default: (/dev/null)
#    log: /var/log/scalr/service.log

#    # Log level of the service. Type:Integer. Valid predefined values are FATAL|ERROR|WARN|INFO|DEBUG (Default: ERROR)
#    log_level: ERROR

    services:
#      # Cron task template. It may be used as an example how to define a service.
#      # Default values should be defined in the Scalr\System\Config\Extension.
#
#      # The name of the service
#      the_name_of_the_service_here:
#        # Whether the service is enabled (Default: no)
#        # System administrator is in charge of enable a new service when doing Scalr upgrade.
#        enabled: no
#
#        # What time task should start at. Format: "minute hour dayOfMonth month dayOfWeek"
#        # where:
#        #   minute     values range from 0 to 59,
#        #   hour       values range from 0 to 23,
#        #   dayOfMonth values range from 1 to 31,
#        #   month      values range from 1 to 12,
#        #   dayOfWeek  values range from 0 to 6, with 0 meaning Sunday
#        # If it is a demonized service, time does not need to be set here, whereas 'daemon' property has to be set to yes.
#        time: "1 */4 * * *"
#
#        ## The number of parallel workers
#        workers: 1
#
#        ## Whether process should be demonized
#        daemon: no
#
#        ## The idle time for demonized task in seconds
#        idle: 5
#
#        ## Time zone which is used to run task. System timezone will be used by default.
#        timezone: ~
#
#        ## Log destination
#        log: /dev/null
#
#        ## Log level. Type:Integer. Valid predefined values are FATAL|ERROR|WARN|INFO|DEBUG
#        log_level: WARN
#
#        ## Memory limit in Mb
#        memory_limit: 0

      analytics_notifications:
        enabled: no
#        log: /var/log/scalr/analytics_notifications.log
#        time: "1 1 * * *"
#        timezone: UTC

      cloud_poller:
        enabled: no
#        log: /var/log/scalr/cloud_poller.log
#        time: "*/2 * * * *"
#        workers: 14
#        ## It is possible optionally to separate the pool of worker threads by cloud platform
#        #replicate:
#        #  type:
#        #  # Either [cloud-platform, number-of-workers] or [cloud-platform] or cloud-platform
#        #  - [openstack, 5]

      cloud_pricing:
        enabled: no
#        log: /var/log/scalr/cloud_pricing.log
#        time: "1 */4 * * *"
#        workers: 4
#        timezone: UTC

      db_msr_maintenance:
        enabled: no
#        log: /var/log/scalr/db_msr_maintenance.log
#        time: "*/5 * * * *"
#        workers: 10

      dns_manager:
        enabled: no
#        log: /var/log/scalr/dns_manager.log
#        workers: 4

      images_builder:
        enabled: no
#        log: /var/log/scalr/images_builder.log
#        workers: 4

      images_cleanup:
        enabled: no
#        log: /var/log/scalr/images_cleanup.log
#        time: "0/20 * * * *"

      lease_manager:
        enabled: no
#        log: /var/log/scalr/lease_manager.log
#        time: "2/20 * * * *"
#        workers: 3

#      # This cron is not mandatory and have to be used only by EE customers.
#      platform_usage:
#        enabled: no
#        log: /var/log/scalr/platform_usage.log
#        time: "30 11,23 * * *"
#        workers: 1

      rotate:
        enabled: no
#        log: /var/log/scalr/rotate.log
#        time: "17 */2 * * *"
#        # Depending on your load and database master-slave replication characteristics
#        delete:
#          # The number of the records to delete per one time. (Default: 1000)
#          limit: 1000
#          # Idle time in secodns between consecutive deletions. (Default: 60)
#          sleep: 60
#        # How long it will keep data for the specified tables.
#        # The value must be valid relative DateTime unit (http://php.net/manual/en/datetime.formats.relative.php)
#        keep:
#          scalr:
#            logentries: "-10 days"
#            orchestration_log: "-7 days"
#            api_log: "-14 days"
#            events: "-2 months"
#            messages: "-10 days"
#            webhook_history: "-30 days"
#            # It rotates log when the number of the records hits the specified value. (Default: 1000000)
#            syslog: 1000000
#          analytics:
#            # Long periods here will hit performance
#            poller_sessions: "-7 days"
#            usage_h: "-1 month"
#            aws_billing_records: "-4 month"

      scalarizr_messaging:
        enabled: no
#        log: /var/log/scalr/scalarizr_messaging.log
        replicate:
          type:
          - HostInit
          - BeforeHostUp
          - HostUp
#        workers: 4

      scaling:
        enabled: no
#        log: /var/log/scalr/scaling.log
#        time: "*/2 * * * *"
#        workers: 14

      scheduler:
        enabled: no
#        log: /var/log/scalr/scheduler.log
#        workers: 4

      server_status_manager:
        enabled: no
#        log: /var/log/scalr/server_status_manager.log
#        workers: 4

      server_terminate:
        enabled: no
#        log: /var/log/scalr/server_terminate.log
#        workers: 4

  endpoint:
#    # Devault value: http
#    scheme: http
    host: 'endpoint url here'

  # Allowed values: public | local | auto.
  instances_connection_policy: public

#  # This is only for my.scalr.com (hosted scalr)
#  hosted:
#    enabled: no
#    analytics:
#      # Lits of the account identifiers which should be able to manage Projects
#      managed_accounts: []

  # ScalrPy load_statistics script configuration
  # This section is required
  load_statistics:
    connections:
      # required
      plotter:
#        bind_host: 0.0.0.0
#        # scheme: http or https
#        scheme: 'http'
        # host to connect to load statistics web server. Required
        # Example: example.com or 127.0.0.1
        host: ~
#        port: 8080
#        bind_port: ~
#        # web server connection pool size
#        pool_size: 100
#        # Required for https
#        ssl_certificate:
#        # Required for https
#        ssl_private_key:
#      # optional, if not present then use scalr:connections:mysql
#      mysql:
##        host: ~
##        port: 3306
##        name: ~
##        user: ~
##        pass: ~
#        # mysql connection pool size
#        pool_size: 10
    rrd:
      # directory to store rdd files. Required
      dir: ~
#      # path to rrdcached sock file
#      rrdcached_sock_path: '/var/run/rrdcached.sock'
    img:
      # directory to store images files. Required
      dir: ~
      # scheme: http or https
      scheme: 'http'
      # host. Required
      host: ~
#      port: false
#      path: ''
#    user:
#    group:
#    # list of metrics for processing
#    metrics: ['cpu', 'la', 'mem', 'net', 'io', 'snum']
#    # use snmp if scalarizr api failed
#    with_snmp: false
#    # size of worker pool for poller
#    pool_size: 100
#    # polling interval in seconds
#    interval: 120
#    log_file: '/var/log/scalr.load-statistics.log'
#    pid_file: '/var/run/scalr.load-statistics.pid'

#  logger:
#    # Audit log
#    audit:
#      <<: *connections_logger
#      # Disabled by default. Default: no
#      enabled: no
#
#      # A common tag to pass to a backend. Default: audit
#      #tag: audit
#
#    # APIv2 log
#    api:
#      <<: *connections_logger
#      # Disabled by default. Default: no
#      enabled: no
#
#      # A common tag to pass to a backend. Default: api
#      #tag: api
#
#    # User log
#    user:
#      <<: *connections_logger
#      # Disabled by default. Default: no
#      enabled: no
#
#      # A common tag to pass to a backend. Default: user
#      #tag: user

#  # ScalrPy msg_sender script configuration
#  # This section is optional and it is required only when you need non default parameters
#  msg_sender:
##    connections:
##      # if 'mysql' not present then use scalr:connections:mysql
##      mysql:
##        host: ~
##        port: 3306
##        name: ~
##        user: ~
##        pass: ~
#    # size of the worker pool
#    pool_size: 100
#    log_file: '/var/log/scalr.msg-sender.log'
#    pid_file: '/var/run/scalr.msg-sender.pid'

#  openstack:
#    # Openstack API client options
#    api_client:
#      # Default connection timeout for api calls
#      timeout: 30
#    use_proxy: no
#    # How to pass user data to openstack: meta-data | personality | both
#    user_data_method: 'both'

#  # This section is optional. It's used for php unit testing.
#  phpunit:
#    # By default all functionl tests are skipped. Default: false
#    # It's also possible to enable series of tests (ui, api or cloud-dependent). In this case array should be provided
#    functional_tests: no
#    #- ui
#    #- api
#    #- cloud-dependent
#
#    # Most of the functional tests require user's environment to handle requests.
#    # value from account_users.id must be provided here
#    userid: 0
#    # client_environments.id must be provided here
#    envid: 0
#
#    # APIv2 tests require special environment in order to be passed.
#    apiv2:
#      userid: 2
#      envid: 2
#      params:
#        # for check all apiv2 response data you should set max_results false
#        max_results: 20
#
#    openstack:
#      platforms:
#      #- [platform, region, imageid]
#      # Rackspace NewGen US
#      - [rackspacengus, DFW, 3afe97b2-26dc-49c5-a2cc-a2fc8d80c001]
#      # Rackspace NewGen UK
#      - [rackspacenguk, LON, 3afe97b2-26dc-49c5-a2cc-a2fc8d80c001]
#      # Nebula
#      - [nebula, RegionOne, 07b26892-9716-453f-9443-9b5e90d2c978]
#      # Open Cloud System
#      - [ocs, RegionOne, 7a0d5ff5-efa1-4dae-a18e-0238fe27f287]
#    cloudstack:
#      platforms:
#      #- [platform, zoneid, templateid, serviceid]
#      # IDCF
#      - [idcf, jp-east-t1v, 2530, 24]

#  rackspacengus:
#    instance_public_ni_name: 'public'
#    instance_private_ni_name: 'private'
#    use_proxy: no

#  # Default value: 300 seconds
#  rss_cache_lifetime: 300

  security:
    user:
      session:
        # The value must be valid relative DateTime unit (http://php.net/manual/en/datetime.formats.relative.php)
        # It will lock session if it hasn't been used for period. Default: +30 minutes
        timeout: "+30 minutes"
        # It will destroy session after specified lifetime despite the fact that session is still being used. Default: +8 hours
        lifetime: "+8 hours"
        # It allows to restore session using KeepSession cookie for the specified period. Default: +30 days
        cookie_lifetime: "+30 days"
      suspension:
        # It will suspend user account when he has not used Scalr for N days. 0 - to disable.
        # Default: 0
        inactivity_days: 0
        # It will suspend user account just after N failed sign in attempts. 0 - to disable.
        # Default: 10
        failed_login_attempts: 10

  system:
    api:
      # Whether Scalr APIv2 is enabled. Default: yes
      enabled: yes
      # Allows to configure the value of Access-Control-Allow-Origin header for API.
      # It can take either array of the origins or wildcard '*' to enable access from any domain.
      # By default API does not send this header. Default: ~
      allowed_origins: ~
    global_variables:
      format: ~
#        SCALR_INSTANCE_INDEX: '%d'

    default_disable_firewall_management: no
    instances_connection_timeout: 4

#    monitoring:
#      # Path to the file in order we need to collect access log for an each UI / API request, Default: ~
#      access_log_path: ~

#    # server terminate timeout in graceful mode. Default: "+3 minutes"
#    server_terminate_timeout: "+3 minutes"

    scripting:
        # Allowed values: instance | scalr
        logs_storage: 'instance'
        # How often we should rotate logs on instances by default (3600 seconds) / Can be overwritten in Farm Designer
        default_instance_log_rotation_period: 3600
        # Abort Server initialization when a Blocking BeforeHostUp Scripts fails (non-zero exit code) !! Can be redefined in FarmDesigner on Advanced tab
        default_abort_init_on_script_fail: 0

#    webhooks:
#      # Whether webhooks should use proxy. Default: no
#      use_proxy: no

  ui:
    support_url: 'https://groups.google.com/d/forum/scalr-discuss'
    wiki_url: 'http://wiki.scalr.com'
    show_deprecated_features: true
    recaptcha:
      public_key: ''
      private_key: ''
    mindterm_enabled: true
    # allowed values: public, private, hostname, auto
    server_display_convention: auto
    pma:
      key: ''
      url: ''
      server_ip: ''
    # HTML text of banner, which will be shown on login page. Default: no
    login_warning: ''

  scalarizr_update:
    # Allowed values client | solo
    mode: 'client'
    default_repo: 'stable'
    server_url: 'http://update.scalr.net/'
    api_port: '8008'
    repos:
      latest:
        deb_repo_url: 'http://apt.scalr.net/debian scalr/'
        rpm_repo_url: 'http://rpm.scalr.net/rpm/rhel/$releasever/$basearch'
        win_repo_url: 'http://win.scalr.net'
      stable:
        deb_repo_url: 'http://apt-delayed.scalr.net/debian scalr/'
        rpm_repo_url: 'http://rpm-delayed.scalr.net/rpm/rhel/$releasever/$basearch'
        win_repo_url: 'http://win-delayed.scalr.net'
#    service:
#      chunk_size: 100
#      pool_size: 100
#      log_file: '/var/log/scalr/szr-upd-service.log'
#      pid_file: '/var/run/scalr/szr-upd-service.pid'

#  script:
#    timeout:
#      # Default value: 180 seconds
#      sync: 180
#      # Default value: 1200 seconds
#      async: 1200
