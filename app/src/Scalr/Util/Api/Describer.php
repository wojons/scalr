<?php

namespace Scalr\Util\Api;

use DateTime;
use Scalr\Exception\FileNotFoundException;
use Scalr\System\Config\Yaml;

/**
 * API Describer, provides methods for description and correction of YAML-specification by defined mutations
 *
 * @author N.V.
 */
class Describer
{

    const SERVICE_NAME_REGEXP = '\w+';
    const VERSION_NAME_REGEXP = '\w+';

    /**
     * Scalr config
     *
     * @var Yaml
     */
    private $config;

    /**
     * Parsed yaml spec
     *
     * @var array
     */
    private $spec;

    /**
     * Api spec file path
     *
     * @var string
     */
    private $specFile;

    /**
     * Chache file path
     *
     * @var string
     */
    private $cacheFile;

    /**
     * Api service
     *
     * @var string
     */
    private $service;

    /**
     * Api version
     *
     * @var string
     */
    private $version;

    /**
     * Spec mutators
     *
     * @var SpecMutator[]
     */
    private $mutators = [];

    /**
     * Describer
     *
     * @param string $version   Api version
     * @param Yaml   $config    Scalr config
     * @param string $service   Api service
     *
     * @throws FileNotFoundException
     */
    public function __construct($version, $service, Yaml $config)
    {
        if (!(preg_match("/^" . static::VERSION_NAME_REGEXP . "$/", $version) && preg_match("/^" . static::SERVICE_NAME_REGEXP . "$/", $service))) {
            throw new FileNotFoundException("{$service}.{$version}");
        }

        $this->version = $version;
        $this->service = $service;

        $file = "{$version}/{$service}-autogenerated.yaml";

        $this->specFile = realpath(APPPATH . "/../api/{$file}");

        if (!$this->specFile) {
            throw new FileNotFoundException("{$service}.{$version}", "API {$version} specification not found for service '{$service}'");
        }

        $this->cacheFile = realpath(CACHEPATH) . "/" . str_replace('/', '-', $file);

        $this->config = $config;
    }

    /**
     * Describes api spec
     *
     * @param \Scalr_UI_Response $response Response object
     */
    public function describe(\Scalr_UI_Response $response)
    {
        $cacheChanged = is_readable($this->cacheFile) ? filemtime($this->cacheFile) : null;
        $specChanged = filemtime($this->specFile);
        $configChanged = filemtime($this->config->getPath());

        if ($cacheChanged < $configChanged || $cacheChanged < $specChanged) {
            $this->spec = yaml_parse_file($this->specFile);

            foreach ($this->mutators as $mutator) {
                $mutator->apply($this->config, $this->version);
            }

            $data = yaml_emit($this->spec, YAML_UTF8_ENCODING);
            if (!file_put_contents($this->cacheFile, $data)) {
                $response->sendFile($this->specFile, [
                    'Content-Type' => 'text/plain;charset=utf-8'
                ], null, $data);

                return;
            }
        }

        $response->sendFile($this->cacheFile, [
            'Content-Type' => 'text/plain;charset=utf-8'
        ]);
    }

    /**
     * Setups new mutator
     *
     * @param SpecMutator $mutator
     *
     * @return $this
     */
    public function mutate(SpecMutator $mutator)
    {
        $mutator->setSpec($this->spec);

        $this->mutators[] = $mutator;

        return $this;
    }
}