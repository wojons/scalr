<?php

namespace Scalr\Util\Stream;

use Scalr\Exception\NotSupportedException;


/**
 * Interface StreamWrapper
 *
 * @package Scalr\Util\Stream
 * @link    http://php.net/manual/en/class.streamwrapper.php
 */
interface StreamWrapper
{

    /**
     * socket
     * @see man 2 stat
     */
    const S_IFSOCK = 0140000;

    /**
     * symbolic link
     * @see man 2 stat
     */
    const S_IFLNK = 0120000;

    /**
     * regular file
     * @see man 2 stat
     */
    const S_IFREG = 0100000;

    /**
     * block device
     * @see man 2 stat
     */
    const S_IFBLK = 0060000;

    /**
     * directory
     * @see man 2 stat
     */
    const S_IFDIR = 0040000;

    /**
     * character device
     * @see man 2 stat
     */
    const S_IFCHR = 0020000;

    /**
     * FIFO
     * @see man 2 stat
     */
    const S_IFIFO = 0010000;

    /**
     * Close directory handle.
     * This method is called in response to closedir().
     * Any resources which were locked, or allocated, during opening and use of the directory stream should be released.
     *
     * @link    http://php.net/manual/en/streamwrapper.dir-closedir.php
     * @return  bool    TRUE on success or FALSE on failure.
     */
    public function dir_closedir();

    /**
     * Open directory handle.
     * This method is called in response to opendir().
     *
     * @link    http://php.net/manual/en/streamwrapper.dir-opendir.php
     *
     * @param   string $path    URL that was passed to opendir().
     * @param   int    $options whether or not to enforce safe_mode (0x04).
     * @return  bool                TRUE on success or FALSE on failure.
     */
    public function dir_opendir($path, $options);

    /**
     * Read entry from directory handle.
     * This method is called in response to readdir().
     *
     * @link    http://php.net/manual/en/streamwrapper.dir-readdir.php
     * @return  string|bool representing the next filename, or FALSE if there is no next file.
     *                      The return value will be casted to string.
     * @throws  NotSupportedException
     */
    public function dir_readdir();

    /**
     * Rewind directory handle.
     * This method is called in response to rewinddir().
     *
     * Should reset the output generated by StreamWrapper::dir_readdir().
     * i.e.: The next call to StreamWrapper::dir_readdir() should return the first entry in the location returned by StreamWrapper::dir_opendir().
     *
     * @link    http://php.net/manual/en/streamwrapper.dir-rewinddir.php
     * @return  bool    TRUE on success or FALSE on failure.
     */
    public function dir_rewinddir();

    /**
     * Create a directory.
     * This method is called in response to mkdir().
     *
     * @link    http://php.net/manual/en/streamwrapper.mkdir.php
     * @param   string $path    directory which should be created.
     * @param   int    $mode    the value passed to mkdir().
     * @param   int    $options A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
     * @return  bool                on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function mkdir($path, $mode, $options);

    /**
     * Renames a file or directory.
     * This method is called in response to rename().
     * Should attempt to rename path_from to path_to
     *
     * @link    http://php.net/manual/en/streamwrapper.rename.php
     * @param   string $path_from URL to the current file.
     * @param   string $path_to   URL which the path_from should be renamed to.
     * @return  bool              TRUE on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function rename($path_from, $path_to);

    /**
     * Removes a directory.
     * This method is called in response to rmdir().
     *
     * @link    http://php.net/manual/en/streamwrapper.rmdir.php
     * @param   string $path    directory URL which should be removed.
     * @param   int    $options bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
     * @return  bool                TRUE on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function rmdir($path, $options);

    /**
     * Retrieve the underlaying resource.
     * This method is called in response to stream_select().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-cast.php
     * @param   int $cast_as Can be STREAM_CAST_FOR_SELECT when stream_select() is calling stream_cast()
     *                       or STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.
     * @return  resource|bool   underlying stream resource used by the wrapper, or FALSE.
     */
    public function stream_cast($cast_as);

    /**
     * Close an resource.
     * This method is called in response to fclose().
     * All resources that were locked, or allocated, by the wrapper should be released.
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-close.php
     * @return  void
     */
    public function stream_close();

    /**
     * Tests for end-of-file on a file pointer.
     * This method is called in response to feof().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-eof.php
     * @return  bool    TRUE if the read/write position is at the end of the stream and
     *                  if no more data is available to be read, or FALSE otherwise.
     */
    public function stream_eof();

    /**
     * Flushes the output.
     * This method is called in response to fflush().
     * If you have cached data in your stream but not yet stored it into the underlying storage, you should do so now.
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-flush.php
     * @return  bool    TRUE if the cached data was successfully stored (or if there was no data to store), or FALSE if the data could not be stored.
     */
    public function stream_flush();

    /**
     * Advisory file locking.
     * This method is called in response to flock(), when file_put_contents() (when flags contains LOCK_EX), stream_set_blocking() and when closing the stream (LOCK_UN).
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-lock.php
     *
     * @param   int $operation      is one of the following:
     *                              LOCK_SH to acquire a shared lock (reader).
     *                              LOCK_EX to acquire an exclusive lock (writer).
     *                              LOCK_UN to release a lock (shared or exclusive).
     *                              LOCK_NB if you don't want flock() to block while locking. (not supported on Windows).
     *
     * @return  bool            TRUE on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function stream_lock($operation);

    /**
     * Change stream options.
     * This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL:
     * touch()
     * chmod()
     * chown()
     * chgrp()
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-metadata.php
     *
     * @param   string $path        file path or URL to set metadata. Note that in the case of a URL, it must be a :// delimited URL. Other URL forms are not supported.
     * @param   int    $option      one of:
     *                              STREAM_META_TOUCH (The method was called in response to touch())
     *                              STREAM_META_OWNER_NAME (The method was called in response to chown() with string parameter)
     *                              STREAM_META_OWNER (The method was called in response to chown())
     *                              STREAM_META_GROUP_NAME (The method was called in response to chgrp())
     *                              STREAM_META_GROUP (The method was called in response to chgrp())
     *                              STREAM_META_ACCESS (The method was called in response to chmod())
     * @param   mixed  $value       if option is:
     *                              STREAM_META_TOUCH: Array consisting of two arguments of the touch() function.
     *                              STREAM_META_OWNER_NAME or STREAM_META_GROUP_NAME: The name of the owner user/group as string.
     *                              STREAM_META_OWNER or STREAM_META_GROUP: The value owner user/group argument as integer.
     *                              STREAM_META_ACCESS: The argument of the chmod() as integer.
     *
     * @return  bool
     * @throws  NotSupportedException
     */
    public function stream_metadata($path, $option, $value);

    /**
     * Opens file or URL.
     * This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-open.php
     *
     * @param   string $path                URL that was passed to the original function.
     * @param   string $mode                used to open the file, as detailed for fopen().
     * @param   int    $options             holds additional flags set by the streams API. It can hold one or more of the following values OR'd together:
     *                                      STREAM_USE_PATH: If path is relative, search for the resource using the include_path.
     *                                      STREAM_REPORT_ERRORS: If this flag is set, you are responsible for raising errors using trigger_error() during opening of the stream. If this flag is not set, you should not raise any errors.
     * @param   string &$opened_path        if the path is opened successfully, and STREAM_USE_PATH is set in options, opened_path should be set to the full path of the file/resource that was actually opened.
     *
     * @return  bool                    TRUE on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function stream_open($path, $mode, $options, &$opened_path);

    /**
     * Read from stream.
     * This method is called in response to fread() and fgets().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-read.php
     *
     * @param   int $count how many bytes of data from the current position should be returned.
     *
     * @return  string          if there are less than count bytes available, return as many as are available. If no more data is available, return either an empty string.
     */
    public function stream_read($count);

    /**
     * Seeks to specific location in a stream.
     * This method is called in response to fseek().
     * The read/write position of the stream should be updated according to the offset and whence.
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-seek.php
     *
     * @param   int $offset     stream offset to seek to.
     * @param   int $whence     optional Possible values:
     *                          SEEK_SET: Set position equal to offset bytes.
     *                          SEEK_CUR: Set position to current location plus offset.
     *                          SEEK_END: Set position to end-of-file plus offset.
     *
     * @return  bool        TRUE if the position was updated, FALSE otherwise.
     */
    public function stream_seek($offset, $whence = SEEK_SET);

    /**
     * Change stream options.
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-set-option.php
     *
     * @param   int $option     one of:
     *                          STREAM_OPTION_BLOCKING: The method was called in response to stream_set_blocking().
     *                          STREAM_OPTION_READ_TIMEOUT: The method was called in response to stream_set_timeout().
     *                          STREAM_OPTION_WRITE_BUFFER: The method was called in response to stream_set_write_buffer().
     * @param   int $arg1       if option is:
     *                          STREAM_OPTION_BLOCKING: requested blocking mode (1 meaning block 0 not blocking).
     *                          STREAM_OPTION_READ_TIMEOUT: the timeout in seconds.
     *                          STREAM_OPTION_WRITE_BUFFER: buffer mode (STREAM_BUFFER_NONE or STREAM_BUFFER_FULL).
     * @param   int $arg2       if option is:
     *                          STREAM_OPTION_BLOCKING: This option is not set.
     *                          STREAM_OPTION_READ_TIMEOUT: the timeout in microseconds.
     *                          STREAM_OPTION_WRITE_BUFFER: the requested buffer size.
     *
     * @return  bool        TRUE on success or FALSE on failure. If option is not implemented, FALSE should be returned.
     */
    public function stream_set_option($option, $arg1, $arg2);

    /**
     * Retrieve information about a file resource.
     * This method is called in response to fstat().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-stat.php
     * @see     http://php.net/manual/en/function.stat.php
     * @see     man 2 stat
     * @return  array
     * @throws  NotSupportedException
     */
    public function stream_stat();

    /**
     * Retrieve the current position of a stream.
     * This method is called in response to fseek() to determine the current position.
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-tell.php
     * @return  int current position of the stream.
     */
    public function stream_tell();

    /**
     * Truncate stream.
     * Will respond to truncation, e.g., through ftruncate().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-truncate.php
     * @param   int $new_size new size.
     * @return  bool    TRUE on success or FALSE on failure.
     */
    public function stream_truncate($new_size);

    /**
     * Write to stream.
     * This method is called in response to fwrite().
     *
     * @link    http://php.net/manual/en/streamwrapper.stream-write.php
     * @param   string $data should be stored into the underlying stream.
     *                       If there is not enough room in the underlying stream, store as much as possible.
     *
     * @return  int             number of bytes that were successfully stored, or 0 if none could be stored.
     * @throws  NotSupportedException
     */
    public function stream_write($data);

    /**
     * Delete a file.
     * This method is called in response to unlink().
     *
     * @link    http://php.net/manual/en/streamwrapper.unlink.php
     * @param   string $path URL which should be deleted.
     * @return  bool            TRUE on success or FALSE on failure.
     * @throws  NotSupportedException
     */
    public function unlink($path);

    /**
     * Retrieve information about a file.
     * This method is called in response to all stat() related functions.
     *
     * @link    http://php.net/manual/en/streamwrapper.url-stat.php
     * @see     http://php.net/manual/en/function.stat.php
     * @see     man 2 stat
     * @param   string $path        file path or URL to stat. Note that in the case of a URL, it must be a :// delimited URL. Other URL forms are not supported.
     * @param   int    $flags       holds additional flags set by the streams API. It can hold one or more of the following values OR'd together.
     *                              STREAM_URL_STAT_LINK: For resources with the ability to link to other resource (such as an HTTP Location: forward, or a filesystem symlink). This flag specified that only information about the link itself should be returned, not the resource pointed to by the link. This flag is set in response to calls to lstat(), is_link(), or filetype().
     *                              STREAM_URL_STAT_QUIET: If this flag is set, your wrapper should not raise any errors. If this flag is not set, you are responsible for reporting errors using the trigger_error() function during stating of the path.
     * @return  array           as many elements as stat() does. Unknown or unavailable values should be set to a rational value (usually 0).
     * 0    dev     device number
     * 1    ino     inode number
     * 2    mode    inode protection mode
     * 3    nlink   number of links
     * 4    uid     userid of owner
     * 5    gid     groupid of owner
     * 6    rdev    device type, if inode device
     * 7    size    size in bytes
     * 8    atime   time of last access (Unix timestamp)
     * 9    mtime   time of last modification (Unix timestamp)
     * 10   ctime   time of last inode change (Unix timestamp)
     * 11   blksize blocksize of filesystem IO
     * 12   blocks  number of 512-byte blocks allocated
     * @throws  NotSupportedException
     */
    public function url_stat($path, $flags);
}
